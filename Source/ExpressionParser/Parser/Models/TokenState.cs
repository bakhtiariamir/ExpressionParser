namespace ExpressionParser.Parser.Models;

public static class TokenState
{
    public static readonly List<TokenTypeState> Items =
    [
        new TokenTypeState(TokenType.StartParentheses, "("),
        new TokenTypeState(TokenType.EndParentheses, ")"),
        //new TokenTypeState(TokenType.Cot, "\""),        
        new TokenTypeState(TokenType.Add, ""),
        new TokenTypeState(TokenType.And, "&"),
        new TokenTypeState(TokenType.AndAlso, "&&"),
        new TokenTypeState(TokenType.ArrayLength, "[-]"),
        new TokenTypeState(TokenType.ArrayIndex, "[/]"),
        new TokenTypeState(TokenType.Call, ""),
        new TokenTypeState(TokenType.Conditional, "?:"),
        //new TokenTypeState(TokenType.Constant, "{}"),
        new TokenTypeState(TokenType.Convert, ""),
        //new TokenTypeState(TokenType.ConvertChecked, ""),
        new TokenTypeState(TokenType.Divide, "/"),
        new TokenTypeState(TokenType.Equal, "="),
        new TokenTypeState(TokenType.GreaterThan, ">"),
        new TokenTypeState(TokenType.GreaterThanOrEqual, ">="),
        //new TokenTypeState(TokenType.Invoke, ""),
        //new TokenTypeState(TokenType.Lambda, ""),
        //new TokenTypeState(TokenType.LeftShift, ""),
        new TokenTypeState(TokenType.LessThan, "<"),
        new TokenTypeState(TokenType.LessThanOrEqual, "<="),
        new TokenTypeState(TokenType.ListInit, "={}"),
        new TokenTypeState(TokenType.MemberAccess, "."),
        new TokenTypeState(TokenType.MemberInit, "Init"),
        //new TokenTypeState(TokenType.Modulo, ""),
        new TokenTypeState(TokenType.Multiply, "*"),
        //new TokenTypeState(TokenType.MultiplyChecked, ""),
        new TokenTypeState(TokenType.Negate, "-"),
        new TokenTypeState(TokenType.UnaryPlus, "(+)"),
        //new TokenTypeState(TokenType.NegateChecked, ""),
        new TokenTypeState(TokenType.New, "new"),
        new TokenTypeState(TokenType.NewArrayInit, "=[]"),
        //new TokenTypeState(TokenType.NewArrayBounds, ""),
        new TokenTypeState(TokenType.Not, "!"),
        new TokenTypeState(TokenType.NotEqual, "!="),
        new TokenTypeState(TokenType.Or, "|"),
        new TokenTypeState(TokenType.OrElse, "||"),
        new TokenTypeState(TokenType.Parameter, "@"),
        new TokenTypeState(TokenType.Power, "^"),
        //new TokenTypeState(TokenType.Quote, ""),
        //new TokenTypeState(TokenType.RightShift, ""),
        new TokenTypeState(TokenType.Subtract, "-"),
        //new TokenTypeState(TokenType.SubtractChecked, "-="),
        //new TokenTypeState(TokenType.TypeAs, ""),
        //new TokenTypeState(TokenType.TypeIs, ""),
        //new TokenTypeState(TokenType.Assign, ""),
        //new TokenTypeState(TokenType.Block, ""),
        //new TokenTypeState(TokenType.Decrement, ""),
        //new TokenTypeState(TokenType.Dynamic, ""),
        //new TokenTypeState(TokenType.Extension, ""),
        //new TokenTypeState(TokenType.Goto, ""),
        //new TokenTypeState(TokenType.Increment, ""),
        //new TokenTypeState(TokenType.Index, ""),
        //new TokenTypeState(TokenType.Label, ""),
        //new TokenTypeState(TokenType.RuntimeVariables,
          //  ""), //A list of run-time variables. For more information, see RuntimeVariablesExpression.
        //new TokenTypeState(TokenType.Loop, ""),
        //new TokenTypeState(TokenType.Switch, ""),
        //new TokenTypeState(TokenType.Throw, ""),
        //new TokenTypeState(TokenType.Try, ""),
        //new TokenTypeState(TokenType.Unbox, ""),
        //new TokenTypeState(TokenType.AddAssign, ""),
        //new TokenTypeState(TokenType.AndAssign, ""),
        //new TokenTypeState(TokenType.DivideAssign, ""),
        //new TokenTypeState(TokenType.LeftShiftAssign, ""),
        //new TokenTypeState(TokenType.ModuloAssign, ""),
        //new TokenTypeState(TokenType.MultiplyAssign, ""),
        //new TokenTypeState(TokenType.OrAssign, ""),
        //new TokenTypeState(TokenType.PowerAssign, ""),
        //new TokenTypeState(TokenType.RightShiftAssign, ""),
        //new TokenTypeState(TokenType.SubtractAssign, ""),
        //new TokenTypeState(TokenType.AddAssignChecked, ""),
        //new TokenTypeState(TokenType.MultiplyAssignChecked, ""),
        //new TokenTypeState(TokenType.SubtractAssignChecked, ""),
        //new TokenTypeState(TokenType.PreIncrementAssign, ""),
        //new TokenTypeState(TokenType.PreDecrementAssign, ""),
        //new TokenTypeState(TokenType.PostIncrementAssign, ""),
        //new TokenTypeState(TokenType.PostDecrementAssign, ""),
        //new TokenTypeState(TokenType.TypeEqual, ""),
        //new TokenTypeState(TokenType.OnesComplement, ""),
        //new TokenTypeState(TokenType.IsTrue, ""),
        //new TokenTypeState(TokenType.IsFalse, "")
    ];
}